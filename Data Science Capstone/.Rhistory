View(ngram1_raw)
word = "where am"
words = as.data.frame(unlist(strsplit(word, " ")))
names(words) = "query"
query_length = nrow(words)
n1_pred = function(words, word){
if(words$query %in% ngram1_raw$words){ #If word in dict, then it is correct
prediction = word
}
else if(substr(words$query[1],1,1) %in% ngram1_raw$start){ #Takes the highest occuring same starting char
start_test = substr(words$query[1],1,1)
start_match = ngram1_raw[ngram1_raw$start == start_test,]
prediction = as.vector(start_match$words[which.max(start_match$total)])
}
else{ #Take the highest occuring word, be great if this took it based on local alignment although be less of issue if bigger data size
prediction = as.vector(ngram1_raw$words[which.max(ngram1_raw$total)])
}
return(prediction)
}
n1_pred(words[2,1], word)
words[2,1]
as.data.frame(words[2,1])
as.data.frame(words[2,1], names="query")
?as.data.frame
as.data.frame(words[2,1], row.names="query")
as.data.frame(words[2,1], col.names="query")
as.data.frame(words[2,1])
w2 = as.data.frame(words[2,1])
names(w2) = "query"
w2 = n1_pred(words[2,1], word)
w2
w2$query
w2$query
w2$query %in% ngram1_raw$words
View(ngram1_raw)
substr(w2$query[1])
word = "cat"
words = as.data.frame(unlist(strsplit(word, " ")))
names(words) = "query"
words
word = "where am"
words = as.data.frame(unlist(strsplit(word, " ")))
names(words) = "query"
w2 = as.data.frame(words[2,1])
names(w2) = "query"
w2 = n1_pred(words[2,1], word)
prediction = paste(words[1,1], w2)
words
words[1,1]
words[1:1
]
words[1:1,]
w2
n1_pred(w2)
n1_pred(w2, word)
w2
w2 = as.data.frame(words[2,1])
names(w2) = "query"
w2
n1_pred(words[2,1], word)
w2 = as.data.frame(words[2,1])
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
prediction
"am" %in% ngram2_raw$word2
?subset
test = subset(ngram2_raw, ngram2_raw$word2 == "raw")
test
test = subset(ngram2_raw, ngram2_raw$word2 == "am")
test
test = subset(ngram2_raw, word2 == "am")
test
w2
length(test)
nrow(test)
shiny::runApp('shinyapp')
w2
words[2,1]
words[2,1]
words[1,1]
nrow(subset(ngram2_raw, word2 == words[2,1])) >= 1
subset(ngram2_raw, word2 == words[2,1])
words[2,1]
as.vector(words[2,1])
shiny::runApp('shinyapp')
nrow(subset(ngram2_raw, word2 == as.vector(words[2,1]))) >= 1
word2
subset(ngram2_raw, word2 == as.vector(words[2,1])
)
subset(ngram2_raw, word2 == as.vector(words[2,1]))
words[2,1]
names(ngram2_raw)
subset(ngram2_raw, ngram2_raw$word2 == as.vector(words[2,1]))
subset(ngram2_raw, word2 == "am")
subset(ngram2_raw, word2 == words[2,1])
words[2,1]
subset(ngram2_raw, word2 == as.vector(words[2,1]))
wods[2,1]
words[2,1]
as.vector(words[2,1])
subset(ngram2_raw, word2 == "am"))
subset(ngram2_raw, word2 == "am")
as.vector(words[2,1])
"am"
word
words
subset(ngram2_raw, word2 == as.vector(words[2,1])
)
subset(ngram2_raw, word2 == as.vector(words[2,1]))
w2
subset(ngram2_raw, word2 == as.data.frame(words[2,1]))
subset(ngram2_raw, word2 == (words[2,1]))
words[2,1]
subset(ngram2_raw, word2 == as.data.frame(words[2,1]))
ngram2_raw[ngram2_raw$word2 == words[2,1]]
ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1])]
ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]
nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),])) >= 1
nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]))
nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),])
shiny::runApp('shinyapp')
word = "go there"
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
else if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
else{ #Take highest occuring preceding word
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
}
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
else if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
else{ #Take highest occuring preceding word
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
}
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
prediction
else if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
prediction
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
}
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
shiny::runApp('shinyapp')
ngram2_raw[ngram2_raw$word2 == "bathroom",]
word = "go th"
words = as.data.frame(unlist(strsplit(word, " ")))
names(words) = "query"
n1_pred(words, word)
word = "th"
words = as.data.frame(unlist(strsplit(word, " ")))
names(words) = "query"
n1_pred(words, word)
word = "get th"
words = as.data.frame(unlist(strsplit(word, " ")))
names(words) = "query"
#Nice to have predict completely based on preceding characters
#could be improved by trying to do local alignment
if(query_length == 1){
prediction = n1_pred(words, word)
}
else if(query_length == 2){
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
else if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
else{ #Take highest occuring preceding word
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
}
}
prediction
#Nice to have predict completely based on preceding characters
#could be improved by trying to do local alignment
if(query_length == 1){
prediction = n1_pred(words, word)
}
else if(query_length == 2){
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
else if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
else{ #Take highest occuring preceding word
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
}
}
words = as.data.frame(unlist(strsplit(word, " ")))
names(words) = "query"
query_length = nrow(words)
#Nice to have predict completely based on preceding characters
#could be improved by trying to do local alignment
if(query_length == 1){
prediction = n1_pred(words, word)
}
else if(query_length == 2){
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
else if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
else{ #Take highest occuring preceding word
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
}
}
#Nice to have predict completely based on preceding characters
#could be improved by trying to do local alignment
if(query_length == 1){
prediction = n1_pred(words, word)
} else if(query_length == 2){
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
else if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
else{ #Take highest occuring preceding word
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
}
}
shiny::runApp('shinyapp')
words[1,1]
ngram2_raw$word1 %in% words[1,1]
shiny::runApp('shinyapp')
if(query_length == 2){
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
else if(words[1,1] %in% ngram1_raw$words){
#predict 1gram freq vs freq of word in word2
w2 = as.data.frame(words[2,1])
if(nrow(ngram2_raw[ngram2_raw$word2 == as.vector(words[2,1]),]) >= 1){
prediction = paste(words[1,1], words[2,1])
}
else{
names(w2) = "query"
w2 = n1_pred(w2, word)
prediction = paste(words[1,1], w2)
}
}
else{ #Take highest occuring preceding word
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(ngram1_raw$words[which.max(ngram1_raw$total)]),]
if(words[2,1] %in% ngram2_raw$word2){ #Check if in dictionary
prediction = paste(word_match$word1[1],words[2,1])
}
else{ #Second word will be predicted based on highest occurence
prediction = as.vector(ngram2_raw$words[which.max(ngram2_raw$total)])
}
}
}
if(words[1,1] %in% ngram2_raw$word1){ #If first word there, take the highest occuring 2nd word following it
if(words[2,1] %in% ngram2_raw$word2){
prediction = paste(words[1,1],words[2,1])
}
else{
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
prediction = paste(words[1,1], as.vector(word_match$word2[which.max(word_match$total)]))
}
}
words[1,1] %in% ngram2_raw$word1
words[2,1] %in% ngram2_raw$word2
prediction = paste(words[1,1],words[2,1])
word_match = ngram2_raw[ngram2_raw$word1 == words[1,1],]
ngram2_raw[ngram2_raw$word1 == words[1,1],]
ngram2_raw[ngram2_raw$word1 == "th",]
words[1,1]
ngram2_raw[ngram2_raw$word1 == as.vector(words[1,1]),]
shiny::runApp('shinyapp')
as.vector(word_match$word2[which.max(word_match$total)])
word_match = ngram2_raw[ngram2_raw$word1 == as.vector(words[1,1]),]
word_match
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
word = "the state of"
words = as.data.frame(unlist(strsplit(word, " ")))
names(words) = "query"
query_length = nrow(words)
if(query_length == 3){
#check if first two words in, if not guess one from list
#check first two words and guess likelihood of next word based on prob
if(paste(words[1,1], words[2,1]) %in% ngram3_raw$phrase){
if(words[3,1] %in% ngram3_raw$word3){
prediction = paste(paste(words[1,1], words[2,1]), words[3,1])
} else{
word_match = ngram3_raw[ngram3_raw$phrase == paste(words[1,1], words[2,1]),]
prediction = paste(paste(words[1,1], words[2,1]), as.vector(word_match$word3[which.max(word_match$total)]))
}
} else{ #Take highest occuring phrase
if(paste(words[1,1], words[2,1]) %in% ngram2_raw$words){
w3 = as.data.frame(words[3,1])
names(w3) = "query"
w3 = n1_pred(w3, word)
predction = paste(words[1,1], words[2,1], w3)
} else{
word_match = ngram3_raw[ngram3_raw$phrase == as.vector(ngram2_raw$words[which.max(ngram2_raw$total)]),]
if(words[3,1] %in% ngram3_raw$word3){ #Check if in dictionary
prediction = paste(word_match$phrase[1], words[2,1])
} else{ #Second word will be predicted based on highest occurence
prediction = paste(word_match$phrase[1], as.vector(word_match$word3[which.max(word_match$total)]))
}
}
}
}
prediction
paste(words[1,1], words[2,1]
)
paste(words[1,1], words[2,1]) %in% ngram2_raw$words
w3 = as.data.frame(words[3,1])
w3
names(w3) = "query"
w3
w3 = n1_pred(w3, word)
w3
predction = paste(words[1,1], words[2,1], w3)
prediction
paste(words[1,1], words[2,1]
)
paste(words[1,1])
paste(words[1,1], words[2,1])
w3
?paste
predction = paste(words[1,1], words[2,1], w3)
w3
prediction
paste(words[1,1], words[2,1], w3)
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
